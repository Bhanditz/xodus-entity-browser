options {
  STATIC = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(SmartSearchQueryParser)

package jetbrains.xodus.browser.web.search;

import java.util.List;
import java.util.ArrayList;

public class SmartSearchQueryParser {

    static List<SearchTerm> check(List<SearchTerm> terms, String query) throws ParseException {
         if(terms == null || terms.isEmpty()){
            throw new ParseException("can't parse query '"  + query + "'");
         }
         return terms;
    }
}
PARSER_END(SmartSearchQueryParser)

SKIP:
{
  " "
  | "\n"
  | "\r"
  | "\t"
}

TOKEN:
{
 <NULL : "null" >
| <PROP_NAME : ("@")? (["a"-"z", "A"-"Z"]){1} (["a"-"z", "A"-"Z", "0"-"9", "_"])* >
| <SIMPLEVALUE : (["a"-"z", "A"-"Z", "0"-"9", "_", "[", "]", "."])* >
| <QUOTED_STRING : "'" (~["'"])* "'" ("'" (~["'"])* "'")* >
| <RANGE_STRING : "[" (~["[","]"])* "]" ("[" (~["[", "]"])* "]")* >
| <EQUALS : "=">
| <LIKE : "~">
| <NOT_EQUALS : "!=">
}

public List<SearchTerm> parse():
{
    List<SearchTerm> terms = new ArrayList<SearchTerm>();
}
{
    (keyValue(terms) (" and " keyValue(terms))*)?
    {
        return check(terms, token.image);
    }
}

public void keyValue(List<SearchTerm> terms):
{
    String k;
    String v;
    String operand;
}
{
    (k=key()) (operand = operand()) (v=value())
    {
        terms.add(SearchTerm.from(k, operand, v));
    }
}

public String key():
{
    Token token;
}
{
    ( token = <PROP_NAME>
    | token = <QUOTED_STRING>)
    {
        return token.image;
    }
}

public String operand():
{
    Token token;
}
{
    ( token = <EQUALS>
    | token = <LIKE>
    | token = <NOT_EQUALS>)
    {
        return token.image;
    }
}

public String value():
{
    Token token;
}
{
    ( token = <SIMPLEVALUE>
    | token = <PROP_NAME>
    | token = <QUOTED_STRING>
    | token = <RANGE_STRING>
    | token = <NULL> )
    {
        return token.image;
    }
}